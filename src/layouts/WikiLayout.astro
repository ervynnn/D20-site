---
import Layout from '~/layouts/PageLayout.astro';
import SideNavigation from '~/components/ui/SideNavigation.astro';
import type { NavigationSection } from '~/components/ui/SideNavigation.astro';

export interface Props {
  frontmatter: {
    title?: string;
    description?: string;
  };
  sideNavSections?: NavigationSection[];
}

const { frontmatter, sideNavSections = [] } = Astro.props;

const metadata = {
  title: frontmatter?.title,
  description: frontmatter?.description,
};

// Build breadcrumb navigation from URL path
const buildBreadcrumbs = () => {
  const path = Astro.url.pathname;
  const segments = path.split('/').filter(segment => segment);
  const breadcrumbs = [{ text: 'Home', href: '/' }];
  
  let currentPath = '';
  for (let i = 0; i < segments.length; i++) {
    currentPath += '/' + segments[i];
    const isLast = i === segments.length - 1;
    
    let text = segments[i];
    
    // Format common system names
    if (text === 'modern.d20.srd') text = 'Modern D20 SRD';
    else if (text === 'future.d20.srd') text = 'Future D20 SRD';
    else if (text === 'arcana.d20.srd') text = 'Arcana D20 SRD';
    else if (text === 'menaces.d20') text = 'D20 Menaces';
    else {
      // Convert other segments to readable format
      text = text.replace(/\./g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }
    
    breadcrumbs.push({
      text,
      href: isLast ? '#' : currentPath
    });
  }
  
  return breadcrumbs;
};

const breadcrumbs = buildBreadcrumbs();

// Generate default navigation sections based on current system
const getDefaultNavigation = (): NavigationSection[] => {
  const path = Astro.url.pathname;
  
  if (path.startsWith('/modern.d20.srd')) {
    return [
      {
        title: 'MODERN D20',
        color: 'blue',
        items: [
          { text: 'Basics', href: '/modern.d20.srd/basics' },
          { text: 'Classes', href: '/modern.d20.srd/classes' },
          { text: 'Equipment', href: '/modern.d20.srd/equipment' },
          { text: 'Combat', href: '/modern.d20.srd/combat' },
          { text: 'Skills', href: '/modern.d20.srd/skills' },
        ]
      }
    ];
  } else if (path.startsWith('/future.d20.srd')) {
    return [
      {
        title: 'FUTURE D20',
        color: 'purple',
        items: [
          { text: 'Classes', href: '/future.d20.srd/classes' },
          { text: 'Cybernetics', href: '/future.d20.srd/cybernetics' },
          { text: 'Mecha', href: '/future.d20.srd/mecha' },
          { text: 'Mutations', href: '/future.d20.srd/mutations' },
          { text: 'Equipment', href: '/future.d20.srd/equipment' },
        ]
      }
    ];
  } else if (path.startsWith('/arcana.d20.srd')) {
    return [
      {
        title: 'ARCANA D20',
        color: 'green',
        items: [
          { text: 'Advanced Classes', href: '/arcana.d20.srd/advanced.classes' },
          { text: 'Magic Items', href: '/arcana.d20.srd/fx.items' },
          { text: 'Incantations', href: '/arcana.d20.srd/incantations' },
          { text: 'Creatures', href: '/arcana.d20.srd/creatures' },
          { text: 'Equipment', href: '/arcana.d20.srd/equipment' },
        ]
      }
    ];
  } else if (path.startsWith('/menaces.d20')) {
    return [
      {
        title: 'D20 MENACES',
        color: 'red',
        items: [
          { text: 'Threat Catalog', href: '/menaces.d20/menaces' },
          { text: 'Feats', href: '/menaces.d20/feats' },
          { text: 'Services', href: '/menaces.d20/buying.services' },
        ]
      }
    ];
  }
  
  return [];
};

const navigationSections = sideNavSections.length > 0 ? sideNavSections : getDefaultNavigation();
---

<Layout metadata={metadata}>
  <div class="flex min-h-screen">
    <!-- Sidebar Navigation -->
    {navigationSections.length > 0 && (
      <SideNavigation 
        sections={navigationSections} 
        currentPath={Astro.url.pathname}
      />
    )}
    
    <!-- Main Content -->
    <main class="flex-1 max-w-none">
      <div class="px-4 py-8 sm:px-6 mx-auto lg:px-8 lg:py-12 max-w-6xl">
        <!-- Breadcrumb Navigation -->
        <nav class="flex items-center space-x-2 text-sm text-gray-500 dark:text-slate-400 mb-6">
          {breadcrumbs.map((crumb, index) => (
            <Fragment>
              {index > 0 && <span>â€º</span>}
              {index === breadcrumbs.length - 1 ? (
                <span class="text-gray-900 dark:text-slate-300 font-medium">{crumb.text}</span>
              ) : (
                <a href={crumb.href} class="hover:text-primary transition-colors">{crumb.text}</a>
              )}
            </Fragment>
          ))}
        </nav>

        <!-- Page Title -->
        <h1 class="font-bold font-heading text-4xl md:text-5xl leading-tighter tracking-tighter text-gray-900 dark:text-slate-300 mb-8">
          {frontmatter.title}
        </h1>
        
        <!-- Content -->
        <div class="mx-auto prose prose-lg max-w-4xl dark:prose-invert dark:prose-headings:text-slate-300 prose-md prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-img:rounded-md prose-img:shadow-lg">
          <slot />
        </div>
      </div>
    </main>
  </div>
</Layout>
