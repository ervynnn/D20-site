---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
<<<<<<< Updated upstream
      {items.map(({ title, description, icon, callToAction, classes: itemClasses = {} }) => (
        <div class="intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
          <div class={twMerge('flex flex-row max-w-md', panelClass, itemClasses?.panel)}>
            <div class="flex justify-center">
              {(icon || defaultIcon) && (
                <Icon
                  name={icon || defaultIcon}
                  class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', defaultIconClass, itemClasses?.icon)}
                />
              )}
            </div>
            <div class="mt-0.5">
              {title && <h3 class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</h3>}
              {description && (
                <p
                  class={twMerge(`${title ? 'mt-3' : ''} text-muted`, descriptionClass, itemClasses?.description)}
                  set:html={description}
                />
              )}
              {callToAction && (
                <div class={twMerge(`${title || description ? 'mt-3' : ''}`, actionClass, itemClasses?.actionClass)}>
                  <Button variant="link" {...callToAction} />
=======
      {items.map(({ title, description, icon, callToAction, classes: itemClasses = {} }) => {
        const cardHref = callToAction?.href;
        const cardTarget = callToAction?.target;
        
        return (
           <Fragment>
          <div class="intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
            {cardHref ? (
              <a 
                href={cardHref}
                {...(cardTarget ? { target: cardTarget, rel: 'noopener noreferrer' } : {})}
                class={twMerge(
                  'flex flex-row items-start max-w-md cursor-pointer transition-all duration-300 ease-in-out hover:shadow-lg hover:shadow-blue-500/20 hover:border-blue-300 hover:-translate-y-1 hover:bg-white/5 p-4 rounded-lg block w-full text-left no-underline', 
                  panelClass, 
                  itemClasses?.panel
                )}
              >
                <div class="flex-shrink-0 mr-4">
                  {(icon || defaultIcon) && (
                    <Icon
                      name={icon || defaultIcon}
                      class={twMerge('w-12 h-12 p-2 rounded-full', defaultIconClass, itemClasses?.icon)}
                    />
                  )}
>>>>>>> Stashed changes
                </div>
              )}
            </div>
          </div>
<<<<<<< Updated upstream
        </div>
      ))}
=======
          </Fragment>
        );
      })}
>>>>>>> Stashed changes
    </div>
  )
}
