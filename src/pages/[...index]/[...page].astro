---
import type { GetStaticPaths } from 'astro';

import Layout from '~/layouts/PageLayout.astro';
import Hero from '~/components/widgets/Hero.astro';
import IndexList from '~/components/ui/IndexList.astro';

import { getStaticPathsBlogList } from '~/utils/blog';

export const prerender = true;

export const getStaticPaths = (async ({ paginate }) => {
  return await getStaticPathsBlogList({ paginate });
}) satisfies GetStaticPaths;

const metadata = {
  title: 'D20 Resources',
  openGraph: {
    type: 'blog',
  },
};

const modernD20: [string, string][] = [
  ['Basics', '/modern.d20.srd/basics'],
  ['FX Items', '/modern.d20.srd/fx.items'],
  ['Classes', '/modern.d20.srd/classes'],
  ['Ordinaries', '/modern.d20.srd/ordinaries'],
  ['Combat', '/modern.d20.srd/combat'],
  ['Psionics', '/modern.d20.srd/psionics'],
  ['Condition Summary', '/modern.d20.srd/conditions'],
  ['Reputation', '/modern.d20.srd/reputation'],
  ['Creature Types', '/modern.d20.srd/creature.types'],
  ['Skills', '/modern.d20.srd/skills'],
  ['Creatures', '/modern.d20.srd/creatures'],
  ['Special Abilities', '/modern.d20.srd/special.abilities'],
  ['Environment & Hazards', '/modern.d20.srd/environment.hazards'],
  ['Starting Occupation', '/modern.d20.srd/starting.occupation'],
  ['Equipment', '/modern.d20.srd/equipment'],
  ['Vehicle Movement and Combat', '/modern.d20.srd/vehicle.movement.and.combat'],
  ['Feats', '/modern.d20.srd/feats'],
  ['Wealth', '/modern.d20.srd/wealth'],
  ['FX', '/modern.d20.srd/fx'],
];

const futureD20: [string, string][] = [
  ['Classes', '/future.d20.srd/classes'],
  ['Progress Levels', '/future.d20.srd/progress.levels'],
  ['Cybernetics', '/future.d20.srd/cybernetics'],
  ['Robots', '/future.d20.srd/robots'],
  ['Environments', '/future.d20.srd/environments'],
  ['Scientific Engineering', '/future.d20.srd/scientific.engineering'],
  ['Equipment', '/future.d20.srd/equipment'],
  ['Starships', '/future.d20.srd/starships'],
  ['Expanded Skills', '/future.d20.srd/expanded.skills'],
  ['Starting Occupations', '/future.d20.srd/starting.occupations'],
  ['Feats', '/future.d20.srd/feats'],
  ['Traveler Science', '/future.d20.srd/traveler.science'],
  ['Mecha', '/future.d20.srd/mecha'],
  ['Vehicles', '/future.d20.srd/vehicles'],
  ['Mutations', '/future.d20.srd/mutations'],
  ['Xenobiology', '/future.d20.srd/xenobiology'],
];

const arcanaD20: [string, string][] = [
  ['Advanced Classes', '/arcana.d20.srd/advanced.classes'],
  ['Occupations', '/arcana.d20.srd/occupations'],
  ['Creatures', '/arcana.d20.srd/creatures'],
  ['Organizations', '/arcana.d20.srd/organizations'],
  ['Equipment', '/arcana.d20.srd/equipment'],
  ['Prestige Classes', '/arcana.d20.srd/prestige.classes'],
  ['Feats', '/arcana.d20.srd/feats'],
  ['Psionics', '/arcana.d20.srd/psionics'],
  ['FX Items', '/arcana.d20.srd/fx.items'],
  ['Shadowkind', '/arcana.d20.srd/shadowkind'],
  ['Incantations', '/arcana.d20.srd/incantations'],
  ['Spells', '/arcana.d20.srd/spells'],
];

const menacesD20 = [
  ['Buying Services', '/menaces.d20/buying.services'],
  ['Feats', '/menaces.d20/feats'],
  ['Menaces', '/menaces.d20/menaces'],
];

const carouselData = [
  {
    id: 'modern',
    title: 'Modern D20',
    description: 'Explore contemporary settings with modern equipment, technology, and gameplay mechanics.',
    links: modernD20.slice(0, 3),
    viewMoreHref: '/modern.d20.srd' // Leave blank as requested
  },
  {
    id: 'future',
    title: 'Future D20',
    description: 'Venture into sci-fi realms with advanced technology, cybernetics, and futuristic equipment.',
    links: futureD20.slice(0, 3),
    viewMoreHref: '/future.d20.srd' // Leave blank as requested
  },
  {
    id: 'arcana',
    title: 'Arcana D20',
    description: 'Delve into mystical arts with spells, incantations, and supernatural abilities.',
    links: arcanaD20.slice(0, 3),
    viewMoreHref: '/arcana.d20.srd' // Leave blank as requested
  }
];
---

<Layout metadata={metadata}>
  <section class="px-6 sm:px-6 py-12 sm:py-16 lg:py-10 mx-auto max-w-6xl">
    <Hero>
      <Fragment slot="title">
        <span class="text-accent dark:text-white highlight">D20 Resources</span>
      </Fragment>
      <Fragment slot="subtitle">
        <span class="hidden sm:inline"> It was created with the idea of making playing d20 games easier. </span>
      </Fragment>
    </Hero>

    <!-- Carousel Section -->
    <div class="carousel-container relative bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-8 mb-12">
      <!-- Navigation arrows -->
      <button class="carousel-prev absolute left-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 rounded-full border-2 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 hover:border-accent flex items-center justify-center transition-colors">
        <span class="text-xl text-gray-600 dark:text-gray-300">←</span>
      </button>
      
      <button class="carousel-next absolute right-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 rounded-full border-2 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 hover:border-accent flex items-center justify-center transition-colors">
        <span class="text-xl text-gray-600 dark:text-gray-300">→</span>
      </button>

      <!-- Carousel slides -->
      <div class="carousel-content overflow-hidden">
        <div class="carousel-track flex transition-transform duration-500 ease-in-out">
          {carouselData.map((slide, index) => (
            <div class="carousel-slide w-full flex-shrink-0 px-8">
              <div class="text-center mb-8">
                <h2 class="text-4xl text-primary font-bold mb-4">{slide.title}</h2>
                <p class="text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">{slide.description}</p>
              </div>
              
              <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-8">
                {slide.links.map(([title, href]) => (
                  <a 
                    href={href} 
                    class="px-6 py-3 border border-gray-300 dark:border-gray-600 rounded hover:border-accent hover:bg-accent hover:text-white transition-colors min-w-[140px] text-center"
                  >
                    {title}
                  </a>
                ))}
                
                <a 
                  href={slide.viewMoreHref} 
                  class="px-6 py-3 bg-primary text-white rounded hover:bg-accent transition-colors min-w-[140px] text-center font-semibold"
                >
                  View More →
                </a>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Carousel indicators -->
      <div class="carousel-indicators flex justify-center gap-2 mt-6">
        {carouselData.map((_, index) => (
          <button 
            class={`w-3 h-3 rounded-full transition-colors ${index === 0 ? 'bg-primary' : 'bg-gray-300 dark:bg-gray-600'}`}
            data-slide={index}
          ></button>
        ))}
      </div>
    </div>

    <!-- Existing content -->
    <!-- <div class="flex flex-col gap-8">
      <IndexList id="modernD20" title="Modern D20" data={modernD20} />
      <IndexList id="futureD20" title="Future D20" data={futureD20} />
      <IndexList id="arcanaD20" title="Arcana D20" data={arcanaD20} />
      
      <div id="menacesD20" class="flex flex-col gap-4">
        <h2 class="text-4xl text-primary font-bold">D20 Menaces</h2>
        <ul class="grid gap-1">
          {menacesD20.map(([title, href]) => (
            <li class="border p-2 hover:border-accent group">
              <a class="block w-full h-full font-light group-hover:font-semibold" href={href}>
                {title}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div> -->

    <!-- Bookmark Downloads Section -->
    <div class="webmaster-note my-8 p-6 border border-gray-300 rounded">
      <h2 class="text-2xl font-bold">Simple Bookmark Downloads:</h2>
      <p>
        <a href="bookmarks/EntireSite_Bookmarks.html" download="EntireSite_Bookmarks.html" class="text-blue-500 hover:underline">
          Entire Site
        </a>            
      </p>
      <p>
        <a href="/bookmarks/Modern_D20_Bookmarks.html" download="Modern_D2_Bookmarks.html" class="text-blue-500 hover:underline">
          Modern D20 SRD
        </a>     
        (<a href="/bookmarks" class="text-blue-500 hover:underline">Instructions</a>)
      </p>
      <p>
        <a href="/bookmarks/Future_D20_Bookmarks.html" download="Future_D20_Bookmarks.html" class="text-blue-500 hover:underline">
          Future D20 SRD
        </a>            
      </p>
      <p>
        <a href="/bookmarks/Arcana_D20_Bookmarks.html" download="Arcana_D20_Bookmarks.html" class="text-blue-500 hover:underline">
          Arcana D20 SRD
        </a>            
      </p>          
      <p>
        <a href="/bookmarks/Menaces_D20_Bookmarks.html" download="Menaces_D20_Bookmarks.html" class="text-blue-500 hover:underline">
          Menaces D20
        </a>            
      </p>
    </div>
  </section>
</Layout>
<script>
  class Carousel {
    constructor() {
      this.currentSlide = 0;
      this.totalSlides = 3;
      this.track = null;
      this.indicators = null;
      this.prevButton = null;
      this.nextButton = null;
      this.autoPlayInterval = null;
      
      this.init();
    }

    init() {
      // Wait for elements to be available
      this.waitForElements().then(() => {
        this.setupElements();
        this.addEventListeners();
        this.updateCarousel();
        this.startAutoPlay();
      });
    }

    waitForElements() {
      return new Promise((resolve) => {
        const checkElements = () => {
          const track = document.querySelector('.carousel-track');
          const indicators = document.querySelectorAll('.carousel-indicators button');
          const prevButton = document.querySelector('.carousel-prev');
          const nextButton = document.querySelector('.carousel-next');
          
          if (track && indicators.length > 0 && prevButton && nextButton) {
            resolve();
          } else {
            setTimeout(checkElements, 50);
          }
        };
        checkElements();
      });
    }

    setupElements() {
      this.track = document.querySelector('.carousel-track');
      this.indicators = document.querySelectorAll('.carousel-indicators button');
      this.prevButton = document.querySelector('.carousel-prev');
      this.nextButton = document.querySelector('.carousel-next');
    }

    addEventListeners() {
      // Remove existing listeners first
      this.removeEventListeners();
      
      // Add new listeners
      this.prevButton?.addEventListener('click', this.handlePrevClick);
      this.nextButton?.addEventListener('click', this.handleNextClick);
      
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index));
      });
    }

    removeEventListeners() {
      this.prevButton?.removeEventListener('click', this.handlePrevClick);
      this.nextButton?.removeEventListener('click', this.handleNextClick);
    }

    handlePrevClick = () => {
      this.prevSlide();
    }

    handleNextClick = () => {
      this.nextSlide();
    }

    updateCarousel() {
      if (!this.track || !this.indicators) return;
      
      const translateX = -this.currentSlide * 100;
      this.track.style.transform = `translateX(${translateX}%)`;
      
      // Update indicators
      this.indicators.forEach((indicator, index) => {
        if (index === this.currentSlide) {
          indicator.classList.remove('bg-gray-300', 'dark:bg-gray-600');
          indicator.classList.add('bg-primary');
        } else {
          indicator.classList.remove('bg-primary');
          indicator.classList.add('bg-gray-300', 'dark:bg-gray-600');
        }
      });
    }

    nextSlide() {
      this.currentSlide = (this.currentSlide + 1) % this.totalSlides;
      this.updateCarousel();
    }

    prevSlide() {
      this.currentSlide = (this.currentSlide - 1 + this.totalSlides) % this.totalSlides;
      this.updateCarousel();
    }

    goToSlide(index) {
      this.currentSlide = index;
      this.updateCarousel();
    }

    startAutoPlay() {
      this.stopAutoPlay(); // Clear any existing interval
      this.autoPlayInterval = setInterval(() => {
        this.nextSlide();
      }, 5000);
    }

    stopAutoPlay() {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval);
        this.autoPlayInterval = null;
      }
    }

    destroy() {
      this.stopAutoPlay();
      this.removeEventListeners();
    }
  }

  // Global carousel instance
  let carouselInstance = null;

  function initializeCarousel() {
    // Destroy existing instance if it exists
    if (carouselInstance) {
      carouselInstance.destroy();
    }
    
    // Create new instance
    carouselInstance = new Carousel();
  }

  // Initialize on different events to handle various navigation scenarios
  document.addEventListener('DOMContentLoaded', initializeCarousel);
  document.addEventListener('astro:page-load', initializeCarousel);
  
  // Fallback for when elements might not be ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCarousel);
  } else {
    initializeCarousel();
  }

  // Cleanup on page unload
  document.addEventListener('astro:before-preparation', () => {
    if (carouselInstance) {
      carouselInstance.destroy();
      carouselInstance = null;
    }
  });
</script>

<style>
  .carousel-container {
    min-height: 400px;
  }
  
  @media (max-width: 640px) {
    .carousel-slide {
      padding-left: 1rem;
      padding-right: 1rem;
    }
    
    .carousel-slide .flex {
      flex-direction: column;
    }
    
    .carousel-prev,
    .carousel-next {
      width: 2.5rem;
      height: 2.5rem;
    }
  }
</style>